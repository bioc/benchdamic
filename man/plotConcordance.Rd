% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotConcordance.R
\name{plotConcordance}
\alias{plotConcordance}
\title{plotConcordance}
\usage{
plotConcordance(concordance, threshold = NULL, cols = NULL)
}
\arguments{
\item{concordance}{A long format \code{data.frame} produced by
[benchdamic::createConcordance()] function.}

\item{threshold}{The threshold for rank (x-axis upper limit if all methods
have a higher number of computed statistics).}

\item{cols}{A named vector containing the color hex codes.}
}
\value{
A 3 elements list of \code{ggplot2} class objects:
\itemize{
    \item{\code{concordanceDendrogram}}{ which contains the
    vertically directioned dendrogram for the methods involved in the
    concordance analysis;}
    \item{\code{concordanceHeatmap}}{ which contains the heatmap of between
    and within method concordances.}}
}
\description{
Produce a list of graphical outputs summarizing the between and
within method concordance.
}
\examples{
data("ps_plaque_16S")

set.seed(123)
phyloseq::sample_data(ps_plaque_16S)$HMP_BODY_SUBSITE <- factor(
    phyloseq::sample_data(ps_plaque_16S)$HMP_BODY_SUBSITE)
split_list <- createSplits(object = ps_plaque_16S,
                           varName = "HMP_BODY_SUBSITE",
                           paired = "RSID",
                           balanced = TRUE,
                           N = 10) # At least 100 is suggested

# Run some methods
# lapply -> Subset1 and Subset2
Plaque_16S_splitsDA <- lapply(X = split_list, FUN = function(subset){
    # apply -> Comparison1, Comparison2, ..., Comparison10
    apply(X = subset, MARGIN = 1, FUN = function(splits) {
        # Splitting
        ps <- phyloseq::prune_samples(phyloseq::sample_names(ps_plaque_16S)
            \%in\% splits, ps_plaque_16S)
        # Keep only present taxa
        ps <- phyloseq::filter_taxa(ps, function(x) sum(x>0)>0, 1)
        # Adding scaling and normalization factors
        ps <- norm_edgeR(object = ps, method = "TMM")
        ps <- norm_CSS(object = ps, method = "median")
        # DA analysis
        returnList = list()
        returnList = within(returnList, {
            da.limma <- DA_limma(object = ps, design = ~ 1 +
                HMP_BODY_SUBSITE, coef = 2, norm = "TMM")
            da.limma.css <- DA_limma(object = ps, design = ~ 1 +
                HMP_BODY_SUBSITE, coef = 2, norm = "CSSmedian")
        })
        return(returnList)
    })
})

# Concordance for p-values
concordance_pvalues = createConcordance(object = Plaque_16S_splitsDA, slot =
    "pValMat", colName = "rawP", type = "pvalue")

# plot the concordance for the ranks 1 to 50.
concordance_plots <- plotConcordance(concordance = concordance_pvalues,
    threshold = 50)
}
\seealso{
[benchdamic::createConcordance()]
}
